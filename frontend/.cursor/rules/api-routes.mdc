---
description: API route patterns and authentication for Next.js API endpoints
globs:
  - "src/app/api/**/*.ts"
alwaysApply: false
---

# API Route Patterns

## Standard Structure

Every API route should follow this pattern:

```typescript
import { type NextRequest, NextResponse } from 'next/server';
import { createClient } from '@supabase/supabase-js';

export async function GET(request: NextRequest) {
  try {
    // 1. Get auth token
    const authHeader = request.headers.get('authorization');
    if (!authHeader) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }
    
    // 2. Create Supabase client with token
    const token = authHeader.replace('Bearer ', '');
    const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL || '';
    const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_API_KEY || '';
    
    const supabase = createClient(supabaseUrl, supabaseAnonKey, {
      global: {
        headers: { Authorization: `Bearer ${token}` },
      },
    });
    
    // 3. Verify user
    const { data: { user }, error } = await supabase.auth.getUser();
    if (error || !user) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }
    
    // 4. Query database (RLS ensures user can only see their data)
    const { data, error: dbError } = await supabase
      .from('table_name')
      .select('*')
      .eq('user_id', user.id);
    
    if (dbError) {
      return NextResponse.json({ error: dbError.message }, { status: 400 });
    }
    
    // 5. Return response
    return NextResponse.json({ data }, { status: 200 });
  } catch (_error) {
    console.error('API Error:', _error);
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 });
  }
}
```

## Error Handling
- Always wrap in try-catch
- Return appropriate HTTP status codes (401, 400, 500)
- Prefix unused error variables with `_`
- Log errors with `console.error()` for debugging
- Never expose internal error details to clients

## Authentication
- Create a new Supabase client per request
- Always verify the user with `supabase.auth.getUser()`
- Never trust client-provided user IDs
- Let RLS policies handle data access control

## Git Workflow
- Run `pnpm biome:fix` before committing
- Use descriptive commit messages
- Use imperative mood ("Add feature" not "Added feature")
