---
description: Places AI Frontend project guidelines - tech stack, structure, and coding standards
globs:
alwaysApply: true
---

# Places AI Frontend - Project Guidelines

## Project Overview
This is a Next.js 14 (App Router) application for AI-powered travel itinerary planning with Google Maps integration, Supabase authentication, and Gemini AI assistance.

## Tech Stack
- **Framework**: Next.js 14 (App Router)
- **Language**: TypeScript
- **UI Library**: Material-UI (MUI) v5
- **Authentication**: Supabase Auth
- **Database**: Supabase (PostgreSQL)
- **Maps**: Google Maps API (@react-google-maps/api)
- **AI**: Gemini AI
- **HTTP Client**: Axios
- **Linter/Formatter**: Biome (NOT ESLint/Prettier)
- **Package Manager**: pnpm

## Project Structure

All application code lives in `src/`:

```
src/
├── app/                    # Next.js App Router (routing & API)
│   ├── api/               # API routes (server-side)
│   │   ├── auth/          # Authentication endpoints
│   │   ├── trips/         # Trip management
│   │   └── itinerary/     # Itinerary management
│   ├── layout.tsx         # Root layout
│   └── page.tsx           # Home page
├── components/            # React components (client-side)
├── lib/                   # Utilities & helpers
│   ├── supabase.ts        # Supabase client (client-side)
│   ├── supabase-server.ts # Supabase utilities (server-side)
│   └── api.ts             # Authenticated API client
└── services/              # Business logic & external services
```

## Code Style & Conventions

### Imports
- **ALWAYS use `@/` path alias** for imports within `src/`
  ```typescript
  // ✅ Good
  import { supabase } from '@/lib/supabase';
  import LoginModal from '@/components/LoginModal';
  
  // ❌ Bad
  import { supabase } from '../lib/supabase';
  import LoginModal from '../../components/LoginModal';
  ```

- **Import order**:
  1. External packages (React, MUI, etc.)
  2. Internal modules using `@/`
  3. Type imports (if separate)

### Naming Conventions
- **Files**: PascalCase for components (`LoginModal.tsx`), camelCase for utilities (`api.ts`)
- **Components**: PascalCase (`TripSelector`)
- **Functions**: camelCase (`handleLogin`, `fetchTrips`)
- **Constants**: UPPER_SNAKE_CASE (`API_BASE_URL`)
- **Interfaces/Types**: PascalCase with descriptive names (`LoginModalProps`, `TripData`)

### TypeScript
- Use TypeScript for ALL files (`.ts`, `.tsx`)
- Prefer `interface` over `type` for object shapes
- Use `type` for unions, intersections, and utility types
- Avoid `any` - use `unknown` or proper types
- For unused variables in catch blocks or function params, prefix with `_` (e.g., `_error`, `_request`)

### React Patterns
- **Client Components**: Add `'use client'` directive at the top
- **Hooks**: Use `useCallback` for functions in dependency arrays to prevent infinite loops
- **State Management**: Use React hooks (`useState`, `useEffect`, `useCallback`)
- **Props**: Always define interface for component props

## Authentication & Authorization

### Client-Side Auth
- Use `@/lib/supabase` for client-side auth operations
- Always call `supabase.auth.setSession()` after login/signup to persist session
- Use `onAuthStateChange()` listener to handle session restoration on page load/refresh
- Session is automatically persisted to localStorage

### Server-Side Auth (API Routes)
- API routes receive the user's access token via `Authorization: Bearer <token>` header
- Create a new Supabase client per request with the user's token:
  ```typescript
  const authHeader = request.headers.get('authorization');
  const token = authHeader.replace('Bearer ', '');
  
  const supabase = createClient(supabaseUrl, supabaseAnonKey, {
    global: {
      headers: { Authorization: `Bearer ${token}` },
    },
  });
  
  const { data: { user }, error } = await supabase.auth.getUser();
  ```

### API Client Helper
- Use `@/lib/api` for authenticated requests from client components
- It automatically attaches the user's access token to requests
  ```typescript
  import { api } from '@/lib/api';
  
  // Automatically includes Authorization header
  const response = await api.get('/api/trips');
  const result = await api.post('/api/trips', { name: 'New Trip' });
  ```

## Database Patterns

### Row Level Security (RLS)
- All tables have RLS enabled
- Policies filter by `user_id` column
- Always verify user ownership in API routes before mutations

### Data Access
- Client → API route → Supabase (with user token)
- Never query Supabase directly from client components
- API routes validate user identity and ownership

## Component Guidelines

### Material-UI
- Use MUI components consistently
- Prefer the `sx` prop for styling over inline styles or CSS modules
- Use theme values for colors, spacing, etc.
  ```typescript
  <Box sx={{ p: 2, bgcolor: 'primary.main' }}>
  ```

### Forms
- Use controlled components with `useState`
- Handle form submission with `onSubmit` and `e.preventDefault()`
- Show loading states during async operations
- Display error/success messages to users

### Modals/Dialogs
- Use MUI `Dialog` component
- Accept `open`, `onClose` props
- Handle cleanup on close (reset form state)

## Linting & Formatting

### Biome (NOT ESLint/Prettier)
- Run `pnpm biome:check` to check for issues
- Run `pnpm biome:fix` to auto-fix issues
- Biome runs automatically on pre-commit via git hooks
- Configuration in `biome.json`

### VS Code Integration
- Biome extension should be installed
- Format on save is enabled
- Don't install ESLint/Prettier extensions for this project

## Best Practices

### Performance
- Use `useCallback` to memoize functions in dependency arrays
- Use `React.memo` for expensive components
- Lazy load components when appropriate

### Security
- Never expose secret keys in client code
- Always validate user identity in API routes
- Use RLS policies for database access control
- Sanitize user inputs

### User Experience
- Show loading states during async operations
- Display clear error messages
- Provide feedback for user actions (success/error)
- Make forms accessible with proper labels

### Code Quality
- Keep components small and focused (single responsibility)
- Extract reusable logic into custom hooks or utilities
- Write descriptive variable and function names
- Add comments for complex logic only
- Remove console.logs before committing (except error logs)

## Common Patterns

### Loading States
```typescript
const [loading, setLoading] = useState(false);

const fetchData = async () => {
  try {
    setLoading(true);
    // ... async operation
  } catch (error) {
    console.error('Error:', error);
  } finally {
    setLoading(false);
  }
};
```

### Auth State Listener
```typescript
useEffect(() => {
  const { data: { subscription } } = supabase.auth.onAuthStateChange(
    (_event, session) => {
      if (session?.user) {
        setUser(session.user);
      } else {
        setUser(null);
      }
    }
  );

  return () => subscription.unsubscribe();
}, []);
```

### Authenticated API Calls
```typescript
import { api } from '@/lib/api';

// GET request
const response = await api.get('/api/trips');
const data = response.data;

// POST request
const response = await api.post('/api/trips', {
  name: 'Trip Name',
  destination: 'Location',
});
```

## Environment Variables

### Required Variables
- `NEXT_PUBLIC_SUPABASE_URL` - Supabase project URL
- `NEXT_PUBLIC_SUPABASE_API_KEY` - Supabase anon/public key
- `NEXT_PUBLIC_GOOGLE_MAPS_API_KEY` - Google Maps API key
- `GEMINI_API_KEY` - Gemini AI API key (server-side only)
- `NEXT_PUBLIC_SITE_URL` - Site URL for email verification redirects

### Environment Files
- `.env.local` - Local development (gitignored)
- `.env` - Shared variables (committed)
- Always prefix client-side variables with `NEXT_PUBLIC_`

## Documentation

Detailed docs are in `docs/`:
- `docs/SUPABASE_SETUP.md` - Auth & database setup
- `docs/DATA_FLOW.md` - Data flow architecture
- `docs/BIOME_SETUP.md` - Linter configuration
- `docs/GIT_HOOKS_SETUP.md` - Git hooks setup

## Remember
- Use Biome (not ESLint/Prettier)
- Use pnpm (not npm/yarn)
- Use `@/` for imports
- Always use TypeScript
- Follow the established patterns
- Keep code clean and consistent
